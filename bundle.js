!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var i=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}var s,a,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},function(e,n,t){"use strict";t.r(n);t(2),t(3)},function(e,n){(new class{constructor(){this.moves=0,this.moves_disabled=!1,this.grid=[],this.grid_el=document.getElementById("grid"),this.controls=document.getElementById("controls")}init(){this.initGrid();const e=document.createElement("button");e.id="restart",e.innerHTML="Перемешать",e.addEventListener("click",this.restart.bind(this)),this.controls.appendChild(e)}initGrid(){this.moves_disabled=!1;for(let e=1;e<=15;e++){const n=document.createElement("div");n.className="tile",n.innerHTML=String(e),n.addEventListener("click",this.handleTileClick.bind(this)),this.grid.push({val:String(e),el:n})}const e=document.createElement("div");e.className="tile tile-blank",e.innerHTML="",this.grid.push({val:"",el:e}),this.shuffle(),this.drawGrid()}makeMove(e,n,t=!0){this.moves_disabled||([this.grid[e],this.grid[n]]=[this.grid[n],this.grid[e]],t&&(this.moves++,this.drawGrid(),this.checkVictory()&&this.win()))}drawGrid(){this.grid_el.innerHTML="";for(let e=0;e<4;e++)for(let n=0;n<4;n++){let t=this.grid[4*e+n];t.el.style.top=String(130*e)+"px",t.el.style.left=String(130*n)+"px",this.grid_el.appendChild(t.el)}}checkVictory(){for(let e=0;e<this.grid.length;e++)if((15!==e||""!==this.grid[e].val)&&Number(this.grid[e].val)!==e+1)return!1;return!0}win(){const e=document.createElement("h2"),n=document.createElement("span"),t=document.createElement("div");e.id="victory-head",e.innerHTML="Победа!",n.className="victory-text",n.innerHTML="Ходов сделано: "+this.moves,t.id="victory-container",t.appendChild(e),t.appendChild(n),this.moves_disabled=!0,this.controls.insertBefore(t,this.controls.firstChild)}restart(){document.getElementById("victory-container").remove(),this.grid=[],this.moves=0,this.initGrid()}handleTileClick(e){const n=e.target,t=this.getByValue(n.innerHTML),r=this.getNeighbours(t);this.isTileMovable(r)&&this.makeMove(t,this.getEmpty())}isTileMovable(e){for(let n=0;n<e.length;n++)if(!e[n].val)return!0;return!1}getByValue(e){return this.grid.findIndex(n=>n.val===e)}getEmpty(){return this.grid.findIndex(e=>""===e.val)}getNeighbours(e){const n=[];return e<=11&&n.push(this.grid[e+4]),(e+1)%4!=0&&n.push(this.grid[e+1]),e>=4&&n.push(this.grid[e-4]),e%4!=0&&n.push(this.grid[e-1]),n}shuffle(){let e;for(let e=0;e<=1e3;e++)this.makeShuffleMove();for(e=this.getEmpty();(e+1)%4!=0;)this.makeMove(e,e+1,!1),e+=1;for(;e<=11;)this.makeMove(e,e+4,!1),e+=4}makeShuffleMove(){const e=this.getEmpty(),n=this.getNeighbours(e);let t=Math.floor(Math.random()*n.length);this.makeMove(e,this.getByValue(n[t].val),!1)}}).init()},function(e,n,t){var r=t(4),i=t(5);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,n,t){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),s=[];function a(e){for(var n=-1,t=0;t<s.length;t++)if(s[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],i=0;i<e.length;i++){var o=e[i],c=n.base?o[0]+n.base:o[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var u=a(d),f={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(s[u].references++,s[u].updater(f)):s.push({identifier:d,updater:m(f,n),references:1}),r.push(d)}return r}function l(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var d,u=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function f(e,n,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,i);else{var o=document.createTextNode(i),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(o,s[n]):e.appendChild(o)}}function A(e,n,t){var r=t.css,i=t.media,o=t.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,p=0;function m(e,n){var t,r,i;if(n.singleton){var o=p++;t=h||(h=l(n)),r=f.bind(null,t,o,!1),i=f.bind(null,t,o,!0)}else t=l(n),r=A.bind(null,t,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=i());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var i=a(t[r]);s[i].references--}for(var o=c(e,n),l=0;l<t.length;l++){var d=a(t[l]);0===s[d].references&&(s[d].updater(),s.splice(d,1))}t=o}}}},function(e,n,t){"use strict";t.r(n);var r=t(0),i=t.n(r)()(!0);i.push([e.i,"html {\r\n  font-family: Verdana,Geneva,sans-serif;\r\n}\r\n\r\n#game {\r\n  display: flex;\r\n}\r\n\r\n#grid {\r\n  width: 518px;\r\n  height: 518px;\r\n  position: relative;\r\n}\r\n\r\n.tile {\r\n  width: 128px;\r\n  height: 128px;\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n}\r\n\r\n.tile-blank {\r\n  border: none;\r\n}\r\n\r\n#controls {\r\n  width: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-left: 50px;\r\n}\r\n\r\n#victory-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#restart {\r\n  padding: 4px 15px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background: transparent;\r\n  font-size: 17px;\r\n  cursor: pointer;\r\n}\r\n\r\n.victory-text {\r\n  margin-bottom: 20px;\r\n}","",{version:3,sources:["webpack://src/style.css"],names:[],mappings:"AAAA;EACE,sCAAsC;AACxC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;EACvB,kBAAkB;EAClB,uBAAuB;EACvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:["html {\r\n  font-family: Verdana,Geneva,sans-serif;\r\n}\r\n\r\n#game {\r\n  display: flex;\r\n}\r\n\r\n#grid {\r\n  width: 518px;\r\n  height: 518px;\r\n  position: relative;\r\n}\r\n\r\n.tile {\r\n  width: 128px;\r\n  height: 128px;\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n}\r\n\r\n.tile-blank {\r\n  border: none;\r\n}\r\n\r\n#controls {\r\n  width: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-left: 50px;\r\n}\r\n\r\n#victory-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#restart {\r\n  padding: 4px 15px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background: transparent;\r\n  font-size: 17px;\r\n  cursor: pointer;\r\n}\r\n\r\n.victory-text {\r\n  margin-bottom: 20px;\r\n}"],sourceRoot:""}]),n.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,